generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model genres {
  genre_id     String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  genre_name   String         @unique @db.VarChar
  created_at   DateTime?      @default(now()) @db.Timestamp(6)
  track_genres track_genres[]
}

model playlist_tracks {
  playlist_id String    @db.Uuid
  track_id    String    @db.Uuid
  playlists   playlists @relation(fields: [playlist_id], references: [playlist_id], onDelete: Cascade, onUpdate: NoAction)
  tracks      tracks    @relation(fields: [track_id], references: [track_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([playlist_id, track_id])
}

model playlists {
  playlist_id     String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String            @unique @db.VarChar
  cover_image_url String?           @db.VarChar
  description     String?
  created_at      DateTime?         @default(now()) @db.Timestamp(6)
  updated_at      DateTime?         @default(now()) @db.Timestamp(6)
  playlist_tracks playlist_tracks[]
}

model track_genres {
  track_id String @db.Uuid
  genre_id String @db.Uuid
  genres   genres @relation(fields: [genre_id], references: [genre_id], onDelete: Cascade, onUpdate: NoAction)
  tracks   tracks @relation(fields: [track_id], references: [track_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([track_id, genre_id])
}

model tracks {
  track_id        String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String            @db.VarChar
  duration        String?           @db.VarChar
  musician_id     String?           @db.Uuid
  album_id        String?           @db.Uuid
  created_at      DateTime?         @default(now()) @db.Timestamp(6)
  updated_at      DateTime?         @default(now()) @db.Timestamp(6)
  playlist_tracks playlist_tracks[]
  track_genres    track_genres[]
  albums          albums?           @relation(fields: [album_id], references: [album_id], onDelete: NoAction, onUpdate: NoAction)
  musician        musician?         @relation(fields: [musician_id], references: [musician_id], onDelete: NoAction, onUpdate: NoAction, map: "tracks_artist_id_fkey")

  @@unique([title, musician_id], map: "unique_track_musician")
}

model musician {
  musician_id String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @unique @db.VarChar
  birth_date  DateTime? @db.Date
  country     String?   @db.VarChar
  tracks      tracks[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model albums {
  album_id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String    @db.VarChar
  track_count     Int
  cover_image_url String?   @db.VarChar
  release_year    Int
  created_at      DateTime? @default(now()) @db.Timestamp(6)
  updated_at      DateTime? @default(now()) @db.Timestamp(6)
  tracks          tracks[]
}
